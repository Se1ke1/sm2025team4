<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="edu.sm.sm2025team4.repository.ProductRepository">


<!--  Product와 Product_Img_Table 연동 섹션  -->
    <resultMap id="product_img_resultmap" type="Product">
        <id property="product_id" column="product_id"/>
        <result property="product_name" column="product_name"/>
        <result property="product_img_main" column="product_img_main"/>
        <result property="product_price" column="product_price"/>
        <result property="product_qtt" column="product_qtt"/>
        <result property="product_regdate" column="product_regdate"/>
        <result property="product_update" column="product_update"/>
        <result property="cate_no" column="cate_no"/>
        <result property="cate_name" column="cate_name"/>
        <result property="seller_id" column="seller_id"/>
        <result property="seller_name" column="seller_name"/>
        <collection property="product_img_list" ofType="Product_Img_Table">
            <id property="product_img_id" column="product_img_id"/>
            <result property="product_id" column="product_id"/>
            <result property="product_img" column="product_img"/>
            <result property="product_img_regdate" column="product_img_regdate"/>
            <result property="product_img_update" column="product_img_update"/>
        </collection>
    </resultMap>

<!--  INSERT 섹션  -->
    <insert id="insert" parameterType="Product" useGeneratedKeys="true" keyProperty="product_id">
        INSERT INTO product (product_name,product_img_main,product_price,product_qtt,cate_no,seller_id)
            VALUES (#{product_name},#{product_img_main},#{product_price},#{product_qtt},#{cate_no},#{seller_id})
    </insert>

<!--  UPDATE 섹션  -->
    <update id="update" parameterType="Product">
        UPDATE product SET product_name=#{product_name},product_img_main=#{product_img_main},
                           product_price=#{product_price},product_qtt=#{product_qtt},
                           cate_no=#{cate_no}, product_update=now()
        WHERE product_id=#{product_id}
    </update>


<!--  SELECT 섹션  -->
    <!--  product_id 기반 단일 검색  -->
        <select id="select" parameterType="Integer" resultMap="product_img_resultmap">
        SELECT
            p.product_id, p.product_name, p.product_img_main, p.product_price, p.product_qtt,
            p.product_regdate, p.product_update, p.cate_no, p.seller_id,
            ct.cate_name, c.cust_name AS seller_name
        FROM product p
        INNER JOIN cate ct ON p.cate_no = ct.cate_no
        INNER JOIN seller s ON p.seller_id = s.seller_id
        INNER JOIN cust c ON s.seller_id = c.cust_id
        WHERE p.product_id = #{product_id}
    </select>
    <!--  전체 검색  -->
        <select id="selectAll" resultMap="product_img_resultmap">
            SELECT
            p.product_id, p.product_name, p.product_img_main, p.product_price, p.product_qtt,
            p.product_regdate, p.product_update, p.cate_no, p.seller_id,
            ct.cate_name, c.cust_name AS seller_name
            FROM product p
            INNER JOIN cate ct ON p.cate_no = ct.cate_no
            INNER JOIN seller s ON p.seller_id = s.seller_id
            INNER JOIN cust c ON s.seller_id = c.cust_id
    </select>
    <!--  seller_id 기반 FK 검색  -->
        <select id="selectByForeignKey" parameterType="String" resultMap="product_img_resultmap">
            SELECT
                p.product_id, p.product_name, p.product_img_main, p.product_price, p.product_qtt,
                p.product_regdate, p.product_update, p.cate_no, p.seller_id,
                ct.cate_name, c.cust_name AS seller_name
            FROM product p
                     INNER JOIN cate ct ON p.cate_no = ct.cate_no
                     LEFT JOIN seller s ON p.seller_id = s.seller_id
                     INNER JOIN cust c ON p.seller_id = c.cust_id
            WHERE p.seller_id = #{seller_id}
            ORDER BY p.product_regdate DESC
        </select>
    <!--  등록일자(regdate) 기반 탐색  -->
        <select id="selectByRegdate" parameterType="Date_Limit_Offset" resultMap="product_img_resultmap">
            SELECT
            p.product_id, p.product_name, p.product_img_main, p.product_price, p.product_qtt,
            p.product_regdate, p.product_update, p.cate_no, ct.cate_name, p.seller_id,
            c.cust_name AS seller_name
            FROM product p
            INNER JOIN cate ct ON p.cate_no = ct.cate_no
            INNER JOIN seller s ON p.seller_id = s.seller_id
            INNER JOIN cust c ON s.seller_id = c.cust_id
            WHERE p.product_regdate BETWEEN #{startDate} AND #{endDate}
            <if test="sortOrderBy!=null and !sortOrderBy.isEmpty()">
                ORDER BY
                    <foreach collection="sortOrderBy" item="sort" separator=",">
                        <choose>
                            <when test="sort.order=='product_price'">
                                p.product_price ${sort.orderBy}
                            </when>
                            <when test="sort.order=='product_name'">
                                p.product_name ${sort.orderBy}
                            </when>
                            <when test="sort.order=='product_regdate'">
                                p.product_regdate ${sort.orderBy}
                            </when>
                            <when test="sort.order=='product_update'">
                                p.product_update ${sort.orderBy}
                            </when>
                            <when test="sort.order=='cate_name'">
                                ct.cate_name ${sort.orderBy}
                            </when>
                            <when test="sort.order=='seller_name'">
                                seller_name ${sort.orderBy}
                            </when>
                            <otherwise>
                                p.product_id ${sort.orderBy}
                            </otherwise>
                        </choose>
                    </foreach>
            </if>
            <if test="limit!=null and offset!=null">
                LIMIT #{limit} OFFSET #{offset}
            </if>
        </select>
    <!-- 기타 조건 정렬 전체 탐색 -->
    <select id="selectByVarious" parameterType="Date_Limit_Offset" resultMap="product_img_resultmap">
        SELECT
        p.product_id, p.product_name, p.product_img_main, p.product_price, p.product_qtt,
        p.product_regdate, p.product_update, p.cate_no, ct.cate_name, p.seller_id,
        c.cust_name AS seller_name
        FROM product p
        INNER JOIN cate ct ON p.cate_no = ct.cate_no
        INNER JOIN seller s ON p.seller_id = s.seller_id
        INNER JOIN cust c ON s.seller_id = c.cust_id
        <if test="sortOrderBy!=null and !sortOrderBy.isEmpty()">
            ORDER BY
            <foreach collection="sortOrderBy" item="sort" separator=",">
                <choose>
                    <when test="sort.order=='product_price'">
                        p.product_price ${sort.orderBy}
                    </when>
                    <when test="sort.order=='product_name'">
                        p.product_name ${sort.orderBy}
                    </when>
                    <when test="sort.order=='product_regdate'">
                        p.product_regdate ${sort.orderBy}
                    </when>
                    <when test="sort.order=='product_update'">
                        p.product_update ${sort.orderBy}
                    </when>
                    <when test="sort.order=='cate_name'">
                        ct.cate_name ${sort.orderBy}
                    </when>
                    <when test="sort.order=='seller_name'">
                        seller_name ${sort.orderBy}
                    </when>
                    <otherwise>
                        p.product_id ${sort.orderBy}
                    </otherwise>
                </choose>
            </foreach>
        </if>
        <if test="limit!=null and offset!=null">
            LIMIT #{limit} OFFSET #{offset}
        </if>
    </select>
<!--  DELETE 섹션  -->
    <!--  product_id 기반 단일 삭제  -->
    <delete id="delete" parameterType="Integer">
        DELETE FROM product WHERE product_id=#{product_id}
    </delete>
    <!--  seller_id 기반 범위 삭제  -->
    <delete id="deleteByForeignKey" parameterType="String">
        DELETE FROM product WHERE seller_id=#{seller_id}
    </delete>
</mapper>